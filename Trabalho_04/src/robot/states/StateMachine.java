package robot.states;

import robot.MyRobotLego;

public class StateMachine extends Thread implements RobotNervousSystem
{
	int i = 0;
	private final MyRobotLego robot;
	
	public StateMachine(MyRobotLego myRobotLego) {
		this.robot = myRobotLego;
		this.start();
	}
	
	public MyRobotLego getRobot() { return this.robot; }
	
	/* Available states */
	private ActiveState activeState;
	private PassiveState passiveState;
	
	public int getActiveState() { return existsActiveState() ? this.activeState.id : -1; }
	public int getPassiveState() { return existsPassiveState() ? this.passiveState.id : -1; }
	
	public boolean existsPassiveState() { return this.passiveState != null ? true : false; }
	public boolean existsActiveState() { return this.activeState != null ? true : false; }
	
	public void setActiveState(ActiveState newState) {
		if(!existsActiveState() || (existsActiveState() && newState.weight > activeState.weight)) {
			setActiveStateForce(newState);
		}
	}
	
	public void setActiveStateForce(ActiveState newState) {
		deactivateActiveState();
		pausePassiveState();
		activeState = newState;
		activeState.execute();
		System.out.println(i++ + " " + "StateMachine, SetActiveState()");
	}
	
	public void deactivateActiveState() {
		if(existsActiveState()) {
			System.out.println(i++ + " " + "StateMachine, DeactivateActiveState()");
			activeState.deactivate();
			activeState = null;
		}
	}
	
	public void setPassiveState(PassiveState newState) {
		deactivatePassiveState();
		passiveState = newState;
	}
	
	public void deactivatePassiveState() {
		if(existsPassiveState()) {
			System.out.println(i++ + " " + "StateMachine, DeactivePassiveState()");
			passiveState.deactivate();
			passiveState = null;
		}
	}
	
	public void pausePassiveState() {
		System.out.println(i++ + " " + "StateMachine, PausePassiveState()");
		if(existsPassiveState() && !passiveState.isPaused()) {
			passiveState.pause();
		}
	}
	
	public void unpausePassiveState() {
		System.out.println(i++ + " " + "StateMachine, UnpausePassiveState()");
		if(existsPassiveState() && passiveState.isPaused()) {
			passiveState.unpause();
		}
	}
	
	/* Available scanners */
	public final static int MAX_SCANNERS = 2;												// Maximum number of available scanners
	
	private Scanner[] scanners = new Scanner[MAX_SCANNERS];
	
	public int numberOfActiveScanners() {
		int i = 0;
		
		for(Scanner scanner : scanners) { 
			i += (scanner != null) ? 1 : 0; 
		}
		
		return i;
	}
	
	public boolean addScanner(Scanner newScanner) {
		int nScanners = numberOfActiveScanners();
		
		if(scanners.length == nScanners) {
			return false;
		}
		
		scanners[nScanners] = newScanner;
		return true;
	}
	
	public int findScanner(int id) {
		for(Scanner scanner : scanners) {
			if(scanner != null && scanner.id == id) {
				return id;
			}
		}
		
		return -1;
	}
	
	public void rmScanner(int id) {
		id = findScanner(id);
		
		if(id > 0) {
			scanners[id].deactivate();
			scanners[id] = null;
		}
	}
	
	/* Handles events generated by each scanner */
	@Override
	public void ObjectDetected(ActiveState newState) {
		System.out.println(i++ + " " + "StateMachine, ObjectDetected()");
		setActiveState(newState);
	}
	
	@Override
	public void ObjectIsGone() {
		System.out.println(i++ + " " + "StateMachine, ObjectIsGone()");
		deactivateActiveState();
		unpausePassiveState();
	}
	/*
	@Override 
	public void run() {
		while(true) {
			try { Thread.sleep(500); }
			catch (InterruptedException e) { e.printStackTrace(); }
			
			System.out.println(i++ + " " + "££££££££££££££££££££");
			if(existsActiveState())
				System.out.println(i++ + " " + ":: Active State: " + activeState.id + " " + activeState.isActive());
			if(existsPassiveState())
				System.out.println(i++ + " " + ":: Passive State: " + passiveState.id + " " + passiveState.isActive() + " " + passiveState.isPaused());;
			if(numberOfActiveScanners() > 0)
				System.out.println(i++ + " " + ":: Scanners: " + (scanners[0] != null ? scanners[0].id + " " + scanners[0].isActive() : -1) + " " + (scanners[1] != null ? scanners[1].id + " " + scanners[1].isActive() : -1));
		}
	}*/
}
