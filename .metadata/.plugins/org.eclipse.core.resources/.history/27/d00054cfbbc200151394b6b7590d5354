package robot.states;

import robot.MyRobotLego;

public class StateMachine implements RobotNervousSystem 
{
	private MyRobotLego robot;
	
	public MyRobotLego getRobot() { return this.robot; }
	
	/* Available states */
	private ActiveState activeState;
	private PassiveState passiveState;
	
	public int getActiveState() { return this.activeState.id; }
	public int getPassiveState() { return this.passiveState.id; }
	
	public boolean existsPassiveState() { return this.passiveState != null ? true : false; }
	public boolean existsActiveState() { return this.activeState != null ? true : false; }
	
	public void setActiveState(ActiveState newState) { 
		deactivateActiveState();
		activeState = newState;
		activeState.execute();
	}
	
	public void deactivateActiveState() {
		if(activeState == null) { return; }
		
		activeState.deactivate();
		activeState = null;
	}
	
	public void setPassiveState(PassiveState newState) {
		deactivatePassiveState();
		passiveState = newState;
	}
	
	public void deactivatePassiveState() {
		if(passiveState == null) { return; }

		passiveState.deactivate();
		passiveState = null;

	}
	
	public boolean pausePassiveState() {
		if(passiveState == null) { return false; }
		
		passiveState.pause();
		return true;
	}
	
	public boolean unpausePassiveState() {
		if(passiveState == null) return false;
		
		passiveState.unpause();
		return true;
	}
	
	/* Available scanners */
	public final static int MAX_SCANNERS = 2;												// Maximum number of available scanners
	
	private Scanner[] scanners = new Scanner[MAX_SCANNERS];
	
	public Scanner[] getScanners() { return this.scanners; }
	
	public int numberOfActiveScanners() {
		int i = 0;
		for(Scanner scanner : scanners) { i = (scanner != null) ? i++ : i; }
		
		return i;
	}
	
	public boolean addScanner(Scanner newScanner) {
		int nScanners = numberOfActiveScanners();
		if(scanners.length == nScanners) { return false; }
		
		scanners[nScanners] = newScanner;
		
		return true;
	}
	
	public void rmScanner(int id) {
		for(Scanner scanner : scanners) {
			if(scanner.id == id) { scanner = null; }
		}
		
		for(int i = 0; i < scanners.length; i++) {
			if(scanners[i] == null && (i < scanners.length - 1)) {
				scanners[i] = scanners[i + 1];
			}
		}
	}
	
	/* Handles events generated by each scanner */
	@Override
	public void ObjectDetected(ActiveState newState) {
		pausePassiveState();
		
		if(activeState == null || (activeState != null && newState.weight > activeState.weight)) {
			setActiveState(newState);
		}
	}
	
	@Override
	public void ObjectIsGone() {
		deactivateActiveState();
		unpausePassiveState();
	}
}
