package robot.states;

import java.util.Random;

import robot.MyRobotLego;

public final class Roam extends PassiveState 
{
	private int order = 0;																// last generated order
	
	public Roam(MyRobotLego robot) {
		super(robot);
	}
	
	@Override
	public void run() {
		while(active) {
			super.run();
			action();
			try { Thread.sleep(delay); } 
			catch (InterruptedException e) { }
		}
		
		robot.Parar(false);
	}

	@Override
	public void action() {
		
		order = randomNumberWithoutRepeating(1, 3, order);
		
		switch(order) {
		case 1:
			int distance = randomNumberWithoutRepeating(5, 45, 0);
			robot.Reta(distance);
			break;
		case 2:
			int radius = randomNumberWithoutRepeating(5, 15, 0);
			robot.CurvarDireita(radius, 90);
			break;
		case 3:
			int radius = randomNumberWithoutRepeating(5, 15, 0);
			robot.CurvarEsquerda(radius, 90);
			break;
		}

	}
	
	public static int randomNumberWithoutRepeating(int min, int max, int previous) {
		Random r = new Random();
		int i = r.nextInt(max) + min;
		
		if(i == previous) { i = randomNumberWithoutRepeating(min, max, previous); }
		
		return i;
	}

}
